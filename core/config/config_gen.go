// Code generated by gen-config.
// data/app.tml
// data/dev/elasticsearch.tml
// data/dev/view.tml
// data/prod/elasticsearch.tml
// data/prod/view.tml
// data/test/elasticsearch.tml
// data/test/view.tml
// DO NOT EDIT

package config

import (
	"path/filepath"
	"strings"

	"github.com/BurntSushi/toml"

	"github.com/gophergala2016/source/core/foundation"
)

type (
	Elasticsearch struct {
		Endpoint string `toml:"endpoint"`
	}
	View struct {
		Ga struct {
			PropertyID string `toml:"property_id"`
		}
		Template struct {
			Delimiters string `toml:"delimiters"`
		}
	}
	App struct {
		Name   string `toml:"name"`
		Secret string `toml:"secret"`
	}

	ConfigData struct {
		Mode string

		App           App           `toml:"app"`
		Elasticsearch Elasticsearch `toml:"elasticsearch"`
		View          View          `toml:"view"`
	}
)

const configDir = "data"

var config ConfigData = ConfigData{}

func init() {
	Load()
}

func Get() ConfigData {
	return config
}

func Load() {
	mode := foundation.Mode()
	names := []string{
		"app.tml",
		"dev/elasticsearch.tml",
		"dev/view.tml",
		"prod/elasticsearch.tml",
		"prod/view.tml",
		"test/elasticsearch.tml",
		"test/view.tml",
	}
	for _, name := range names {
		dir, _ := filepath.Split(name)
		if len(dir) > 0 && !strings.HasPrefix(dir, mode) {
			continue
		}
		b := MustAsset(filepath.Join(configDir, name))
		err := config.Unmarshal(b)
		if err != nil {
			panic(err)
		}
		foundation.Printf("Load Config File: %s", name)
	}
	config.Mode = mode
}

func (c *ConfigData) Unmarshal(b []byte) error {
	return toml.Unmarshal(b, c)
}

func GetApp() App {
	return Get().App
}

func GetElasticsearch() Elasticsearch {
	return Get().Elasticsearch
}

func GetView() View {
	return Get().View
}
