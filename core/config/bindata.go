// Code generated by go-bindata.
// sources:
// data/app.tml
// data/dev/database.tml
// data/dev/view.tml
// data/prod/database.tml
// data/prod/view.tml
// data/test/database.tml
// data/test/view.tml
// DO NOT EDIT!

package config

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAppTml = []byte(`[app]
name   = "source"
secret = "rTnWHcueJGgOmKS21bjY20Ah7Oq2fwab4pSr08VDi"

client_id = "qaw35dRtgyhtpDdDA21vgbjmyr43474kkdj"
`)

func dataAppTmlBytes() ([]byte, error) {
	return _dataAppTml, nil
}

func dataAppTml() (*asset, error) {
	bytes, err := dataAppTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/app.tml", size: 128, mode: os.FileMode(420), modTime: time.Unix(1453564926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDevDatabaseTml = []byte(`[database]
driver = "mysql"
source = "root@tcp(localhost:3306)/source?charset=utf8mb4&parseTime=True"
`)

func dataDevDatabaseTmlBytes() ([]byte, error) {
	return _dataDevDatabaseTml, nil
}

func dataDevDatabaseTml() (*asset, error) {
	bytes, err := dataDevDatabaseTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dev/database.tml", size: 102, mode: os.FileMode(420), modTime: time.Unix(1453532906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDevViewTml = []byte(`[view.ga]
property_id = "UA-34139434-6"

[view.template]
delimiters = "{{{ }}}"

`)

func dataDevViewTmlBytes() ([]byte, error) {
	return _dataDevViewTml, nil
}

func dataDevViewTml() (*asset, error) {
	bytes, err := dataDevViewTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dev/view.tml", size: 81, mode: os.FileMode(420), modTime: time.Unix(1453522739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProdDatabaseTml = []byte(`[database]
driver = "mysql"
source = "root@tcp(localhost:3306)/source?charset=utf8mb4&parseTime=True"
`)

func dataProdDatabaseTmlBytes() ([]byte, error) {
	return _dataProdDatabaseTml, nil
}

func dataProdDatabaseTml() (*asset, error) {
	bytes, err := dataProdDatabaseTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/prod/database.tml", size: 102, mode: os.FileMode(420), modTime: time.Unix(1453532929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProdViewTml = []byte(`[view.ga]
property_id = "UA-34139434-6"

[view.template]
delimiters = "{{{ }}}"

`)

func dataProdViewTmlBytes() ([]byte, error) {
	return _dataProdViewTml, nil
}

func dataProdViewTml() (*asset, error) {
	bytes, err := dataProdViewTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/prod/view.tml", size: 81, mode: os.FileMode(420), modTime: time.Unix(1453522739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTestDatabaseTml = []byte(`[database]
driver = "mysql"
source = "root@tcp(localhost:3306)/source?charset=utf8mb4&parseTime=True"
`)

func dataTestDatabaseTmlBytes() ([]byte, error) {
	return _dataTestDatabaseTml, nil
}

func dataTestDatabaseTml() (*asset, error) {
	bytes, err := dataTestDatabaseTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/test/database.tml", size: 102, mode: os.FileMode(420), modTime: time.Unix(1453532940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTestViewTml = []byte(`[view.ga]
property_id = "UA-34139434-6"

[view.template]
delimiters = "{{{ }}}"

`)

func dataTestViewTmlBytes() ([]byte, error) {
	return _dataTestViewTml, nil
}

func dataTestViewTml() (*asset, error) {
	bytes, err := dataTestViewTmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/test/view.tml", size: 81, mode: os.FileMode(420), modTime: time.Unix(1453522739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/app.tml":           dataAppTml,
	"data/dev/database.tml":  dataDevDatabaseTml,
	"data/dev/view.tml":      dataDevViewTml,
	"data/prod/database.tml": dataProdDatabaseTml,
	"data/prod/view.tml":     dataProdViewTml,
	"data/test/database.tml": dataTestDatabaseTml,
	"data/test/view.tml":     dataTestViewTml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"app.tml": {dataAppTml, map[string]*bintree{}},
		"dev": {nil, map[string]*bintree{
			"database.tml": {dataDevDatabaseTml, map[string]*bintree{}},
			"view.tml":     {dataDevViewTml, map[string]*bintree{}},
		}},
		"prod": {nil, map[string]*bintree{
			"database.tml": {dataProdDatabaseTml, map[string]*bintree{}},
			"view.tml":     {dataProdViewTml, map[string]*bintree{}},
		}},
		"test": {nil, map[string]*bintree{
			"database.tml": {dataTestDatabaseTml, map[string]*bintree{}},
			"view.tml":     {dataTestViewTml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
