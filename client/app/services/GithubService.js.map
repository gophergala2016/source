{"version":3,"sources":["services/GithubService.ts"],"names":["GithubService","GithubService.constructor","GithubService.createWindow","GithubService.getAuthorizeURL","GithubService.doLogin","GithubService.getQueryString","GithubService._callAPI","GithubService.getAccessToken","GithubService.getUser"],"mappings":"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","file":"services/GithubService.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {Inject} from 'angular2/di';\n\nexport class GithubService {\n\n    private windowHandle:any = null;\n    private intervalId:any = null;\n    private loopCount = 600;\n    private intervalLength = 100;\n    \n    constructor() {\n    }\n\n    createWindow(url:string, name:string='Window', width:number=500, height:number=600, left:number=0, top:number=0) {\n        if (url == null) {\n            return null;\n        }\n        var options = `width=${width},height=${height},left=${left},top=${top}`;\n        return window.open(url, name, options);\n    }\n\n    getAuthorizeURL() {\n        return 'https://github.com/login/oauth/authorize?client_id=dd3e0054b2eab3c42a53&redirect_uri=http://getsource.io/auth/callback&response_type=code'; \n    }\n\n    public doLogin() {\n        var loopCount = this.loopCount;\n        this.windowHandle = window.open(this.getAuthorizeURL());\n\n        this.intervalId = setInterval(() => {\n        if (loopCount-- < 0) { // if we get below 0, it's a timeout and we close the window\n            clearInterval(this.intervalId);\n            this.windowHandle.close();\n        } else { // otherwise we check the URL of the window\n            var href:string;\n            try {\n                href = this.windowHandle.location.href;\n            } catch (e) {\n                console.log('Error:', e);\n            }\n\n        }\n    }, this.intervalLength);\n    }\n\n\n    getQueryString() {\n        var result = {};\n        if( 1 < this.windowHandle.location.search.length )\n        {\n            var query = this.windowHandle.location.search.substring( 1 );\n            var parameters = query.split( '&' );\n\n            for( var i = 0; i < parameters.length; i++ )\n            {\n                var element = parameters[ i ].split( '=' );\n\n                var paramName = decodeURIComponent( element[ 0 ] );\n                var paramValue = decodeURIComponent( element[ 1 ] );\n\n                result[ paramName ] = paramValue;\n            }\n        }\n        return result;\n    }\n\n    _callAPI(url:string, method:string, data:any) {\n        return window.fetch(url, {\n            method: method,\n            headers: {},\n            body: JSON.stringify(data)\n        })\n    }   \n\n    public getAccessToken(code:string) {\n        var data = {\n            'code': code,\n            'client_id': 'dd3e0054b2eab3c42a53',\n            'client_secret': 'xxx',\n            'grant_type': 'authorization_code',     \n            'redirect_uri': 'http://getsource.io/auth/callback',\n        };\n        return this._callAPI('https://github.com/login/oauth/access_token', 'POST', data);\n    }\n\n    getUser(accessToken:string) {\n        var data = {};\n        return this._callAPI('https://api.github.com/user?access_token=' + accessToken, 'GET', data);\n    }\n}\n\nexport let githubServiceInjectables = [\n    GithubService\n];\n"],"sourceRoot":"/source/"}