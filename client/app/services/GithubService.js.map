{"version":3,"sources":["services/GithubService.ts"],"names":["GithubService","GithubService.constructor","GithubService._callAPI","GithubService.getAuthorizeURL","GithubService.getQueryString","GithubService.getCode","GithubService.getAccessToken","GithubService.getUser"],"mappings":"AAAA,+CAA+C;AAI/C;IAGIA;IACAC,CAACA;IAEDD,gCAAQA,GAARA,UAASA,GAAUA,EAAEA,MAAaA,EAAEA,IAAQA;QACxCE,MAAMA,CAACA,MAAMA,CAACA,KAAKA,CAACA,GAAGA,EAAEA;YACrBA,MAAMA,EAAEA,MAAMA;YACdA,OAAOA,EAAEA,EAAEA;YACXA,IAAIA,EAAEA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA;SAC7BA,CAACA,CAAAA;IACNA,CAACA;IAEDF,uCAAeA,GAAfA;QACIG,MAAMA,CAACA,wIAAwIA,CAACA;IACpJA,CAACA;IAEDH,sCAAcA,GAAdA;QACII,IAAIA,MAAMA,GAAGA,EAAEA,CAACA;QAChBA,EAAEA,CAAAA,CAAEA,CAACA,GAAGA,MAAMA,CAACA,QAAQA,CAACA,MAAMA,CAACA,MAAOA,CAACA,CACvCA,CAACA;YACGA,IAAIA,KAAKA,GAAGA,MAAMA,CAACA,QAAQA,CAACA,MAAMA,CAACA,SAASA,CAAEA,CAACA,CAAEA,CAACA;YAClDA,IAAIA,UAAUA,GAAGA,KAAKA,CAACA,KAAKA,CAAEA,GAAGA,CAAEA,CAACA;YAEpCA,GAAGA,CAAAA,CAAEA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAC1CA,CAACA;gBACGA,IAAIA,OAAOA,GAAGA,UAAUA,CAAEA,CAACA,CAAEA,CAACA,KAAKA,CAAEA,GAAGA,CAAEA,CAACA;gBAE3CA,IAAIA,SAASA,GAAGA,kBAAkBA,CAAEA,OAAOA,CAAEA,CAACA,CAAEA,CAAEA,CAACA;gBACnDA,IAAIA,UAAUA,GAAGA,kBAAkBA,CAAEA,OAAOA,CAAEA,CAACA,CAAEA,CAAEA,CAACA;gBAEpDA,MAAMA,CAAEA,SAASA,CAAEA,GAAGA,UAAUA,CAACA;YACrCA,CAACA;QACLA,CAACA;QACDA,MAAMA,CAACA,MAAMA,CAACA;IAClBA,CAACA;IAEDJ,+BAAOA,GAAPA;QACIK,IAAIA,KAAKA,GAAGA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;QAClCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA;IACzBA,CAACA;IAEDL,sCAAcA,GAAdA,UAAeA,IAAWA;QACtBM,IAAIA,IAAIA,GAAGA;YACPA,MAAMA,EAAEA,IAAIA;YACZA,WAAWA,EAAEA,sBAAsBA;YACnCA,eAAeA,EAAEA,KAAKA;YACtBA,YAAYA,EAAEA,oBAAoBA;YAClCA,cAAcA,EAAEA,gCAAgCA;SACnDA,CAACA;QACFA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,6CAA6CA,EAAEA,MAAMA,EAAEA,IAAIA,CAACA,CAACA;IACtFA,CAACA;IAEDN,+BAAOA,GAAPA,UAAQA,WAAkBA;QACtBO,IAAIA,IAAIA,GAAGA,EAAEA,CAACA;QACdA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,2CAA2CA,GAAGA,WAAWA,EAAEA,KAAKA,EAAEA,IAAIA,CAACA,CAACA;IACjGA,CAACA;IACLP,oBAACA;AAADA,CA1DA,AA0DCA,IAAA;AA1DY,qBAAa,gBA0DzB,CAAA;AAEU,gCAAwB,GAAG;IAClC,aAAa;CAChB,CAAC","file":"services/GithubService.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n\nimport {Inject} from 'angular2/di';\n\nexport class GithubService {\n\n    \n    constructor() {\n    }\n\n    _callAPI(url:string, method:string, data:any) {\n        return window.fetch(url, {\n            method: method,\n            headers: {},\n            body: JSON.stringify(data)\n        })\n    }\n\n    getAuthorizeURL() {\n        return 'https://github.com/login/oauth/authorize?client_id=dd3e0054b2eab3c42a53&redirect_uri=source://oauth-callback/github&response_type=code'; \n    }\n\n    getQueryString() {\n        var result = {};\n        if( 1 < window.location.search.length )\n        {\n            var query = window.location.search.substring( 1 );\n            var parameters = query.split( '&' );\n\n            for( var i = 0; i < parameters.length; i++ )\n            {\n                var element = parameters[ i ].split( '=' );\n\n                var paramName = decodeURIComponent( element[ 0 ] );\n                var paramValue = decodeURIComponent( element[ 1 ] );\n\n                result[ paramName ] = paramValue;\n            }\n        }\n        return result;\n    }\n\n    getCode() {\n        var query = this.getQueryString();\n        return query['code'];\n    }\n\n    getAccessToken(code:string) {\n        var data = {\n            'code': code,\n            'client_id': 'dd3e0054b2eab3c42a53',\n            'client_secret': 'xxx',\n            'grant_type': 'authorization_code',     \n            'redirect_uri': 'source://oauth-callback/github',\n        };\n        return this._callAPI('https://github.com/login/oauth/access_token', 'POST', data);\n    }\n\n    getUser(accessToken:string) {\n        var data = {};\n        return this._callAPI('https://api.github.com/user?access_token=' + accessToken, 'GET', data);\n    }\n}\n\nexport let githubServiceInjectables = [\n    GithubService\n];\n"],"sourceRoot":"/source/"}